name: Build PandoraTrader

on:
  push:
    branches: [main, ndev, develop]
  pull_request:
    branches: [main, ndev, develop]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu 版本
          - os: ubuntu-24.04
            name: 'Ubuntu 24.04'
            build_type: Debug
          - os: ubuntu-24.04
            name: 'Ubuntu 24.04'
            build_type: Release
          - os: ubuntu-22.04
            name: 'Ubuntu 22.04'
            build_type: Debug
          - os: ubuntu-22.04
            name: 'Ubuntu 22.04'
            build_type: Release
          # macOS 版本
          - os: macos-15
            name: 'macOS 15'
            build_type: Debug
          - os: macos-15
            name: 'macOS 15'
            build_type: Release
          - os: macos-14
            name: 'macOS 14'
            build_type: Debug
          - os: macos-14
            name: 'macOS 14'
            build_type: Release

    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.name }} (${{ matrix.build_type }})

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y cmake build-essential libomp-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install cmake libomp
          fi

      - name: Configure and Build
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build . --parallel 2

      - name: Verify build artifacts
        run: |
          echo "=== Build Verification for ${{ matrix.name }} (${{ matrix.build_type }}) ==="

          # 设置预期的构建目录
          BUILD_DIR="bin/${{ matrix.build_type }}"
          echo "Checking build directory: $BUILD_DIR"

          # 检查构建目录是否存在
          if [[ ! -d "$BUILD_DIR" ]]; then
            echo "❌ Build directory $BUILD_DIR not found!"
            echo "Available directories in bin/:"
            ls -la bin/ 2>/dev/null || echo "bin/ directory does not exist"
            exit 1
          fi

          echo "✅ Build directory exists: $BUILD_DIR"
          echo ""

          # 检查预期的二进制文件
          echo "=== Checking Executables ==="
          EXECUTABLES=(
            "PandoraSimulator"
            "PandoraTrader"
          )

          for exe in "${EXECUTABLES[@]}"; do
            exe_path="$BUILD_DIR/$exe"
            if [[ -f "$exe_path" ]]; then
              echo "✅ $exe found"
              echo "   Path: $exe_path"
              echo "   Size: $(du -sh "$exe_path" | cut -f1)"
              
              # 检查是否可执行（Linux）
              if [[ "$RUNNER_OS" == "Linux" ]]; then
                if [[ -x "$exe_path" ]]; then
                  echo "   Permissions: ✅ Executable"
                else
                  echo "   Permissions: ❌ Not executable"
                fi
              fi
              
              # 检查依赖库（仅作为信息显示）
              if [[ "$RUNNER_OS" == "Linux" ]] && command -v ldd >/dev/null 2>&1; then
                echo "   Dependencies (first 3):"
                ldd "$exe_path" 2>/dev/null | head -3 | sed 's/^/     /' || echo "     Unable to check dependencies"
              elif [[ "$RUNNER_OS" == "macOS" ]] && command -v otool >/dev/null 2>&1; then
                echo "   Dependencies (first 3):"
                otool -L "$exe_path" 2>/dev/null | head -4 | tail -3 | sed 's/^/     /' || echo "     Unable to check dependencies"
              fi
            else
              echo "❌ $exe NOT FOUND at $exe_path"
              MISSING_FILES=true
            fi
            echo ""
          done

          # 检查预期的库文件
          echo "=== Checking Libraries ==="
          LIBRARIES=(
            "libPandoraStrategy.a"
          )

          for lib in "${LIBRARIES[@]}"; do
            lib_path="$BUILD_DIR/$lib"
            if [[ -f "$lib_path" ]]; then
              echo "✅ $lib found"
              echo "   Path: $lib_path"
              echo "   Size: $(du -sh "$lib_path" | cut -f1)"
              
              # 检查库文件内容（仅作为信息显示）
              if command -v ar >/dev/null 2>&1; then
                echo "   Objects in library:"
                ar -t "$lib_path" 2>/dev/null | head -5 | sed 's/^/     /' || echo "     Unable to list objects"
                if [[ $(ar -t "$lib_path" 2>/dev/null | wc -l) -gt 5 ]]; then
                  echo "     ... and $(( $(ar -t "$lib_path" 2>/dev/null | wc -l) - 5 )) more objects"
                fi
              fi
            else
              echo "❌ $lib NOT FOUND at $lib_path"
              MISSING_FILES=true
            fi
            echo ""
          done

          # 检查构建目录的总体情况
          echo "=== Build Directory Summary ==="
          echo "Total files in $BUILD_DIR:"
          find "$BUILD_DIR" -type f | wc -l
          echo ""
          echo "Directory size: $(du -sh "$BUILD_DIR" | cut -f1)"
          echo ""
          echo "All files in $BUILD_DIR:"
          ls -lah "$BUILD_DIR"
          echo ""

          # 最终验证结果
          if [[ "$MISSING_FILES" == "true" ]]; then
            echo "❌ BUILD VERIFICATION FAILED: Some expected files are missing!"
            exit 1
          else
            echo "✅ BUILD VERIFICATION PASSED: All expected files generated successfully!"
            echo "🎉 Build completed successfully for ${{ matrix.name }} (${{ matrix.build_type }})"
          fi
